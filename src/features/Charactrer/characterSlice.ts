import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getCharacter } from '../../api/characters';

export interface CharacterState {
  loading: boolean;
  character: any | null;
}

const initialState: CharacterState = {
  loading: false,
  character: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCharacterAsync = createAsyncThunk(
  'character/fetchCharacter',
  async (id: string) => {
    const character = await getCharacter(id);
    // The value we  becomes the `fulfilled` action payload
    return character;
  }
);


export const characterSlice = createSlice({
  name: 'character',
  initialState,
  reducers: {},
  // The `reducers` field lets us define reducers and generate associated actions
  // reducers: {
  //   increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
    //   state.value += 1;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
  //   incrementByAmount: (state, action: PayloadAction<number>) => {
  //     state.value += action.payload;
  //   },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCharacterAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(getCharacterAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.character = action.payload;
      })
      .addCase(getCharacterAsync.rejected, (state) => {
        state.loading = false;
      });
  },
});



export default characterSlice.reducer;
